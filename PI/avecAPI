import requests
import pandas as pd
import matplotlib.pyplot as plt

API_KEY = 'TB2MS9VQS1XNROG8'
BASE_URL = 'https://www.alphavantage.co/query'

def get_stock_data(symbol):
    url = f'{BASE_URL}?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    
    # Vérification des données disponibles
    if "Time Series (Daily)" not in data:
        print("Erreur : Les données boursières ne sont pas disponibles.")
        return None
    
    # Récupérer les données de prix
    time_series = data['Time Series (Daily)']
    df = pd.DataFrame.from_dict(time_series, orient='index')
    
    # Renommer les colonnes pour plus de lisibilité
    df.columns = ['open', 'high', 'low', 'close', 'volume']
    
    # Convertir l'index en format date et les colonnes en type float
    df.index = pd.to_datetime(df.index)
    df = df.astype(float)
    df = df.sort_index()

    return df

def calculate_sma(prices, period):
    return prices.rolling(window=period).mean()

def calculate_rsi(prices, period=14):
    delta = prices.diff()  # Calcul des changements de prix d'un jour à l'autre
    gain = delta.where(delta > 0, 0)  # Gains seulement (remplacer les pertes par 0)
    loss = -delta.where(delta < 0, 0)  # Pertes seulement (remplacer les gains par 0)

    # Moyenne exponentielle des gains et des pertes
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()

    # Calcul du RS (Relative Strength)
    rs = avg_gain / avg_loss

    # Calcul du RSI
    rsi = 100 - (100 / (1 + rs))

    return rsi

def get_moving_average(symbol, interval='daily', time_period=20, series_type='close'):
    url = f'https://www.alphavantage.co/query?function=SMA&symbol={symbol}&interval={interval}&time_period={time_period}&series_type={series_type}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    if 'Technical Analysis: SMA' in data:
        return pd.DataFrame.from_dict(data['Technical Analysis: SMA'], orient='index', dtype=float)
    else:
        print("SMA data not found!")
        return print(pd.DataFrame())

def get_rsi(symbol, interval='daily', time_period=14, series_type='close'):
    url = f'https://www.alphavantage.co/query?function=RSI&symbol={symbol}&interval={interval}&time_period={time_period}&series_type={series_type}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    print(data)  # Pour vérifier ce que renvoie l'API
    if 'Technical Analysis: RSI' in data:
        return pd.DataFrame.from_dict(data['Technical Analysis: RSI'], orient='index', dtype=float)
    else:
        print("Erreur : Les données RSI ne sont pas disponibles")
        return pd.DataFrame()



def get_bollinger_bands(symbol, interval='daily', time_period=20, series_type='close'):
    url = f'https://www.alphavantage.co/query?function=BBANDS&symbol={symbol}&interval={interval}&time_period={time_period}&series_type={series_type}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    if 'Technical Analysis: BBANDS' in data:
        return pd.DataFrame.from_dict(data['Technical Analysis: BBANDS'], orient='index', dtype=float)
    else:
        print("Bollinger Bands data not found!")
        return pd.DataFrame()

def get_macd(symbol, interval='daily', series_type='close'):
    url = f'https://www.alphavantage.co/query?function=MACD&symbol={symbol}&interval={interval}&series_type={series_type}&apikey={API_KEY}'
    response = requests.get(url)
    data = response.json()
    if 'Technical Analysis: MACD' in data:
        return pd.DataFrame.from_dict(data['Technical Analysis: MACD'], orient='index', dtype=float)
    else:
        print("MACD data not found!")
        return pd.DataFrame()

# Récupération des données
stock_data = get_stock_data('AAPL')
sma_data = get_moving_average('AAPL')
rsi_data = get_rsi('AAPL')
bollinger_data = get_bollinger_bands('AAPL')
macd_data = get_macd('AAPL')

# Joindre les indicateurs aux données de prix
if not sma_data.empty:
    stock_data = stock_data.join(sma_data, rsuffix='_SMA')
if not rsi_data.empty:
    stock_data = stock_data.join(rsi_data, rsuffix='_RSI')
if not bollinger_data.empty:
    stock_data = stock_data.join(bollinger_data, rsuffix='_BBANDS')
if not macd_data.empty:
    stock_data = stock_data.join(macd_data, rsuffix='_MACD')

# Afficher les premières lignes

if __name__ == "__main__":
    symbol = 'AAPL'  # Symbole de l'action
    stock_data = get_stock_data(symbol)

    if stock_data is not None:
        # Calculer le SMA et le RSI
        stock_data['SMA_20'] = calculate_sma(stock_data['close'], 20)
        stock_data['RSI_14'] = calculate_rsi(stock_data['close'], 14)

        # Afficher les résultats
        print(stock_data[['close', 'SMA_20', 'RSI_14']].tail(20))

        # Visualiser les données
        plt.figure(figsize=(14, 7))
        plt.plot(stock_data['close'], label='Prix de Clôture', color='blue')
        plt.plot(stock_data['SMA_20'], label='SMA 20', color='orange')
        plt.title(f'Prix de Clôture et SMA de l\'action {symbol}')
        plt.xlabel('Date')
        plt.ylabel('Prix')
        plt.legend()
        plt.show()

        # Visualiser le RSI
        plt.figure(figsize=(14, 5))
        plt.plot(stock_data['RSI_14'], label='RSI 14', color='purple')
        plt.axhline(70, linestyle='--', alpha=0.5, color='red')
        plt.axhline(30, linestyle='--', alpha=0.5, color='green')
        plt.title(f'RSI de l\'action {symbol}')
        plt.xlabel('Date')
        plt.ylabel('RSI')
        plt.legend()
        plt.show()